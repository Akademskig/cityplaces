{"version":3,"sources":["serviceWorker.js","config/index.js","config/map-styles.js","components/GoogleMapComponent.js","services/places.js","services/notifications.js","components/Cards.js","components/PlacesList.js","containers/CurrentLocation.js","services/login.js","components/Navigation.js","containers/App.js","containers/OtherLocations.js","containers/LoginPage.js","containers/savedPlaces.js","routes.js","components/ErrorHandler.js","index.js"],"names":["Boolean","window","location","hostname","match","googleApi","mapStyles","elementType","stylers","color","featureType","visibility","GoogleMapComponent","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","pIds","state","places","props","placesIds","input","document","getElementById","currentInfoShow","marker","e","currentInfoVisible","currentMarker","setState","name","fetchPlaces","mapProps","map","markerCenter","newCenter","google","maps","LatLng","center","lat","lng","requestPlaces","service","PlacesService","query","radius","keyword","rankBy","RankBy","DISTANCE","nearbySearch","data","forEach","d","includes","id","createMarker","push","requestDetails","placeId","place_id","fields","getDetails","det","opening_hours","url","getPlaces","prepareMap","controls","ControlPosition","TOP_RIGHT","closeButton","closeMap","prepareAutocomplete","currentPosition","prepareMarkers","p","autocomplete","Autocomplete","types","bindTo","infowindow","InfoWindow","infowindowContent","setContent","event","addListener","close","place","getPlace","geometry","autoPlace","setNewLoc","formatted_address","componentDidUpdate","visible","inherits","createClass","key","value","_createMarker","asyncToGenerator","regenerator_default","a","mark","_callee","position","draggable","_this2","wrap","_context","prev","next","type","Marker","icon","scaledSize","Size","infoContent","currentLocContent","open","latLng","stop","_x","_x2","_x3","react_default","createElement","dist","zoom","initialCenter","onReady","styles","Component","controlBtn","content","classList","style","margin","padding","backgroundColor","borderRadius","appendChild","addEventListener","text","src","photos","photoreference","photo_reference","getUrl","openingHours","weekday_text","wdt","join","vicinity","PlacesApi","init","placesUrl","getCurrentPosition","reset","navigator","geolocation","Promise","resolve","reject","_ref","_callee2","_context2","latitude","coords","longitude","getByCurrentLocation","sent","axios","get","dataType","results","post","userId","delete","notify","msg","title","timeout","callback","NotificationManager","info","success","warning","error","Cards","colors","pages","setCardNums","innerWidth","items","savePlace","pid","savedPlaces","placesApi","user_id","localStorage","getItem","then","target","disabled","removePlace","updatePlaces","activePage","Math","ceil","placesListCount","parseInt","itemsPerPage","paginate","list","offset","start","end","slice","componentWillMount","ev","getPlacesForUser","res","placesList","handlePageChange","handleItemsPerPageChange","removeEventListener","totalPages","Grid","stackable","columns","GridColumn","marginBottom","Pagination","onPageChange","bind","Label","size","textAlign","Input","label","min","max","onChange","Cards_CardList","assign","CurrentStatus","hasOwnProperty","opened","SaveOrRemoveBut","Button","compact","saveButtonColor","onClick","CardList","Card","Group","itemsPerRow","_","openedNow","open_now","Content","Header","Column","width","Image","height","verticalAlign","Meta","Icon","rating","Segment","vertical","basic","paddingBottom","Description","Cards_CurrentStatus","showMap","className","imageSize","float","overflow","rounded","Cards_SaveOrRemoveBut","PlacesList","mapVisible","loc","hidden","components_GoogleMapComponent","resetMap","loading","Cards_Cards","userPlaces","CurrentLocation","getFormData","getPosition","gma","catch","err","message","getPlacesFromMap","filteredPlaces","loadingPlaces","handleSearch","filter","pl","toLowerCase","CurrentLocation_CurrentPositionView","resetPosition","CurrentLocation_SearchCurrentForm","onSearch","PlacesList_PlacesList","CurrentPositionView","preventDefault","opacity","SearchCurrentForm","_this3","handlePlaceChange","handleRadiusChange","handleSubmit","Form","onSubmit","widths","Field","iconPosition","placeholder","step","labelPosition","floated","LoginService","tokenPrefix","userCredentials","setItem","user","_id","username","token","Navigation","loginService","Menu","attached","Dropdown","item","Item","as","Link","to","App","Container","components_Navigation","routes","lib","OtherLocations","newPlace","onKeyword","OtherLocations_OtherLocationsView","OtherLocations_SearchOtherForm","findPlaces","SearchOtherForm","city","handleCityChange","ref","OtherLocationsView","containers_LoginPage","LoginPage","buttonColorCreateNew","buttonColorSignIn","login","password","signIn","history","console","log","response","createUser","selectSignIn","selectLogIn","clear","marginTop","Divider","LoginPage_LoginForm","LoginForm","passInputType","handleUserChange","handlePasswordChange","changePassType","SavedPlaces","citiesList","filteredCities","filterCities","$e","$e2","fp","flag","i","address_components","find","ac","long_name","country","uniqBy","savedPlaces_SearchBar","SearchBar","Select","marginRight","options","authGuard","containers_App","Redirect","GoogleApiWrapper","apiKey","Switch","Route","path","render","containers_CurrentLocation","containers_OtherLocations","savedPlaces_SavedPlaces","ErrorHandler","errorInfo","whiteSpace","toString","componentStack","children","ReactDOM","ErrorHandler_ErrorHandler","BrowserRouter","exact","component","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6de6c816.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const googleApi = {\n    nearbySearchUrl: \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\",\n    geocodeUrl: \"https://maps.googleapis.com/maps/api/geocode/json?\",\n    photosUrl: \"https://maps.googleapis.com/maps/api/place/photo?\",\n    mapsUrl: \"https://maps.googleapis.com/maps/api/js?\",\n    apiKey: \"AIzaSyA_h5tnlq-qjVqJVDT8NrusM8eJJ_YTF6s\"\n}\n\n// exmaples:\n// https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=1500&type=restaurant&keyword=cruise&key=YOUR_API_KEY\n// https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=YOUR_API_KEY","export const mapStyles = [\n    {\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#ebe3cd\"\n            }\n        ]\n    },\n    {\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#523735\"\n            }\n        ]\n    },\n    {\n        \"elementType\": \"labels.text.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#f5f1e6\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#c9b2a6\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.land_parcel\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#dcd2be\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"administrative.land_parcel\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#ae9e90\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"landscape.natural\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#dfd2ae\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#dfd2ae\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#93817c\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#a5b076\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"poi.park\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#447530\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#f5f1e6\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#fdfcf8\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.arterial\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#f8c967\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#e9bc62\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway\",\n        \"elementType\": \"labels\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway.controlled_access\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#e98d58\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.highway.controlled_access\",\n        \"elementType\": \"geometry.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#db8555\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.local\",\n        \"stylers\": [\n            {\n                \"visibility\": \"off\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"road.local\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#806b63\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.line\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#dfd2ae\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.line\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#8f7d77\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.line\",\n        \"elementType\": \"labels.text.stroke\",\n        \"stylers\": [\n            {\n                \"color\": \"#ebe3cd\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"transit.station\",\n        \"elementType\": \"geometry\",\n        \"stylers\": [\n            {\n                \"color\": \"#dfd2ae\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#b9d3c2\"\n            }\n        ]\n    },\n    {\n        \"featureType\": \"water\",\n        \"elementType\": \"labels.text.fill\",\n        \"stylers\": [\n            {\n                \"color\": \"#92998d\"\n            }\n        ]\n    }\n]","import { googleApi } from '../config'\nimport React, { Component } from 'react'\nimport { Map } from 'google-maps-react';\nimport { mapStyles } from '../config/map-styles'\n\nexport class GoogleMapComponent extends Component {\n    pIds = []\n    state = {\n        places: this.props.places,\n        placesIds: [],\n    }\n    map\n    input = document.getElementById(\"searchCityField\")\n    currentInfoShow = (props, marker, e) => {\n        if (this.state.currentInfoVisible && marker === this.state.currentMarker)\n            this.setState({ currentInfoVisible: false })\n        else {\n            this.setState({\n                currentInfoVisible: true,\n                currentMarker: marker,\n                name: props.name\n            })\n        }\n    }\n    fetchPlaces = (mapProps, map, markerCenter) => {\n        let newCenter = new this.props.google.maps.LatLng(map.center.lat(), map.center.lng())\n\n        if (markerCenter)\n            newCenter = new this.props.google.maps.LatLng(markerCenter.lat, markerCenter.lng)\n\n        this.setState({\n            center: newCenter\n        })\n        const service = new this.props.google.maps.places.PlacesService(map);\n        let requestPlaces\n        if (this.props.query && this.props.query.radius) {\n            requestPlaces = {\n                location: this.state.center,\n                radius: this.props.query.radius,\n                keyword: this.props.query.keyword\n            }\n        }\n        else {\n            requestPlaces = {\n                location: this.state.center,\n                rankBy: this.props.google.maps.places.RankBy.DISTANCE,\n                keyword: this.props.query.keyword\n            }\n        }\n\n        const callbackPlaces = (data) => {\n            data.forEach(d => {\n                if (!this.state.placesIds.includes(d.id))\n                    this.createMarker(d, null, map)\n                this.pIds.push(d.id)\n                let requestDetails = {\n                    placeId: d.place_id,\n                    fields: [\"opening_hours,url\"]\n                }\n                service.getDetails(requestDetails, (det) => {\n                    d[\"opening_hours\"] = det ? det.opening_hours : det\n                    d[\"url\"] = det ? det.url : det\n                })\n            })\n            this.setState({\n                places: data,\n                placesIds: this.pIds\n            })\n\n            this.props.getPlaces(this.state.places)\n        }\n        service.nearbySearch(requestPlaces, callbackPlaces);\n    }\n\n    async createMarker(place, position, map) {\n        let location\n        if (place) {\n            location = { lat: place.geometry.location.lat, lng: place.geometry.location.lng }\n            if (typeof place.geometry.location.lat == \"function\")\n                location = { lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }\n        }\n        let draggable = false\n        if (position && !this.props.type)\n            draggable = true\n        var marker = new window.google.maps.Marker({\n            map: map,\n            position: position || location,\n            draggable: draggable,\n            icon: place ? {\n                url: place.icon, scaledSize: place.id !== this.props.center.place.id ?\n                    new this.props.google.maps.Size(25, 25) : new this.props.google.maps.Size(35, 35)\n            } : null,\n        });\n        var infowindow = new window.google.maps.InfoWindow();\n        window.google.maps.event.addListener(marker, 'click', function () {\n            infowindow.setContent(place ? infoContent(place) : currentLocContent(\"You are here\"));\n            infowindow.open(map, this);\n        });\n        window.google.maps.event.addListener(marker, 'dragend', (e) => {\n            this.fetchPlaces(null, map, { lat: e.latLng.lat(), lng: e.latLng.lng() })\n        });\n    }\n\n    prepareMap = (mapProps, map) => {\n        this.map = map\n        this.setState({\n            places: this.props.places\n        })\n        map.controls[this.props.google.maps.ControlPosition.TOP_RIGHT].push(closeButton(this.props.closeMap));\n        this.prepareAutocomplete(map)\n        this.createMarker(null, this.props.currentPosition, map)\n    }\n\n    prepareMarkers = (map) => {\n        if (this.state.places)\n            this.state.places.forEach(p => {\n                this.createMarker(p, null, map)\n            })\n        else\n            this.props.places.forEach(p => {\n                this.createMarker(p, null, map)\n            })\n\n        this.pIds = []\n    }\n    prepareAutocomplete = (map) => {\n\n        var input = document.getElementById('searchCityField');\n        if (!input)\n            return\n        var autocomplete\n\n        autocomplete = new this.props.google.maps.places.Autocomplete(input, { types: ['(cities)'] })\n        autocomplete.bindTo('bounds', map);\n        var infowindow = new this.props.google.maps.InfoWindow();\n        var infowindowContent = document.getElementById('infowindow-content');\n        infowindow.setContent(infowindowContent);\n        this.props.google.maps.event.addListener(autocomplete, 'place_changed', () => {\n            infowindow.close();\n            var place = autocomplete.getPlace();\n            if (!place.geometry) {\n                return;\n            }\n            this.setState({ autoPlace: { lat: place.geometry.location.lat(), lng: place.geometry.location.lng() } })\n            this.props.setNewLoc(this.state.autoPlace, place.formatted_address)\n\n        })\n    }\n\n    componentDidUpdate = () => {\n        if (this.props.visible) {\n            this.prepareMarkers(this.map)\n        }\n    }\n\n    render() {\n        if (this.props.close) {\n            return <div></div>\n        }\n        return (\n            <div>\n                <div>\n\n                    < Map\n                        google={this.props.google}\n                        zoom={16}\n                        visible={this.props.visible}\n                        initialCenter={this.props.center}\n                        center={this.state.center || this.props.center}\n                        onReady={this.prepareMap}\n                        styles={mapStyles}\n                    >\n                    </Map >\n\n                </div >\n            </div>\n        );\n    }\n}\nconst closeButton = (closeMap) => {\n    let controlBtn = document.createElement(\"div\")\n    let content = document.createElement(\"i\")\n    content.classList = \"window close outline icon\"\n    content.style.color = \"black\"\n    controlBtn.classList = \"ui button big icon\"\n    controlBtn.style.margin = \"10px\"\n    controlBtn.style.padding = \"10px\"\n    controlBtn.style.backgroundColor = \"white\"\n    controlBtn.style.borderRadius = \"0\"\n    controlBtn.appendChild(content)\n    controlBtn.addEventListener(\"click\", closeMap)\n    return (\n        controlBtn\n    )\n}\nconst currentLocContent = (text) => {\n    return `<div class=\"ui card\" style=\"width:100px\">\n                    <div class=\"ui card content\" style=\"padding:3px\">\n                        <div class=\"ui header\">${text}</div>\n                    </div>\n                </div>`\n}\nconst infoContent = (place) => {\n    let src\n    if (place.photos) {\n        const photoreference = place.photos[0].photo_reference\n        if (photoreference)\n            src = `${googleApi.photosUrl}maxwidth=150&photoreference=${photoreference}&key=${googleApi.apiKey}`\n        else\n            src = place.photos[0].getUrl()\n    }\n    let openingHours = [`<div style=\"margin-bottom: 5px\">OPENING HOURS</div>`]\n    if (place.opening_hours && place.opening_hours.weekday_text) {\n        place.opening_hours.weekday_text.forEach(wdt => {\n            openingHours.push(`<div style=\"padding-bottom:2px\">${wdt}</div>`)\n        })\n        openingHours = openingHours.join(\"\")\n    }\n    else {\n        openingHours = `<div>No additional data</div>`\n    }\n    return `<div class=\"ui card\">\n                    <div class=\"ui card content\">\n                        <div class=\"ui header\">${place.name}</div>\n                    </div>\n                    <div class=\"ui card content\">\n                        <strong class=\"segment vertical basic\">${place.vicinity}</strong>\n                        <div class=\"info-image ui segment vertical basic\">\n                            <img width=\"150px\" src=${src}>\n            </div>\n                            <div class=\"ui segment basic vertical\">\n                                ${openingHours}\n                            </div>\n                            <div class=\"ui segment basic vertical\">\n                                <a target=\"_blank\" href=${place.url}><div>View on Google maps <div><a>\n                </div>\n                                </div>\n                                </div>`\n}\n\nexport default GoogleMapComponent\n\n","import axios from 'axios'\nimport { googleApi } from '../config'\n\nexport default class PlacesApi {\n    latitude\n    longitude\n    location\n    constructor() {\n        this.init()\n        this.placesUrl = \"http://localhost:5000/api/user/places\"\n    }\n    async init() {\n        await this.getCurrentPosition()\n    }\n    async getCurrentPosition(reset) {\n        if (!reset && this.location) {\n            return this.location\n        }\n        if (navigator.geolocation) {\n            return new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition(async (position) => {\n                    this.latitude = position.coords.latitude;\n                    this.longitude = position.coords.longitude;\n                    this.location = await this.getByCurrentLocation()\n                    resolve({ location: this.location, lat: this.latitude, lng: this.longitude })\n                })\n            })\n        }\n    }\n    async getByCurrentLocation() {\n        const url = `${googleApi.geocodeUrl}latlng=${this.latitude},${this.longitude}&result_type=locality|country&key=${googleApi.apiKey}`\n        const data = await axios.get(url, {\n            dataType: \"application/json\"\n        })\n        return data.data.results[0].formatted_address\n    }\n\n    async getPlaces(radius, keyword, center) {\n        let lat, lng\n        if (center) {\n            lat = center.lat\n            lng = center.lng\n        }\n        else {\n            lat = this.latitude\n            lng = this.longitude\n        }\n        let url = `http://localhost:5000/api/google-api/nearby-search?lat=${lat}&lng=${lng}&rankby=distance&keyword=${keyword}&key=${googleApi.apiKey}`\n        if (radius && keyword)\n            url = `http://localhost:5000/api/google-api/nearby-search?lat=${lat}&lng=${lng}&radius=${radius}&keyword=${keyword}&key=${googleApi.apiKey}`\n        return axios.get(url, {\n            dataType: \"application/json\"\n        })\n    }\n    async getDetails(placeId, fields) {\n        const url = `http://localhost:5000/api/google-api/details-search?place_id=${placeId}&fields=${fields}`\n        return await axios.get(url, {\n            dataType: \"application/json\"\n        })\n    }\n    async savePlace(data) {\n        await axios.post(\n            this.placesUrl,\n            data,\n            {\n                dataType: \"application/json\"\n            })\n    }\n\n    async removePlace(userId, placeId) {\n        await axios.delete(`${this.placesUrl}/${userId}/${placeId}`, {\n            dataType: \"application/json\"\n        })\n    }\n\n    async getPlacesForUser(userId) {\n        return axios.get(`${this.placesUrl}/${userId}`, { dataType: \"application/json\" })\n    }\n}","import { NotificationManager } from 'react-notifications';\n\nexport const notify = (type, msg, title, timeout, callback) => {\n\n\n    switch (type) {\n        case 'info':\n            NotificationManager.info(msg, title || 'Info', timeout || 3000, callback || null);\n            break;\n        case 'success':\n            NotificationManager.success(msg, title || 'Sucess!', timeout || 3000, callback || null);\n            break;\n        case 'warning':\n            NotificationManager.warning(msg, title || \"Warning!\", timeout || 3000, callback || null);\n            break;\n        case 'error':\n            NotificationManager.error(msg, title || \"Error!\", timeout || 3000, callback || null\n            );\n            break;\n        default: break;\n    }\n\n}","import React, { Component } from 'react';\nimport { Segment, Icon, Grid, Image, Card, Button, Pagination, Input, GridColumn, Label } from 'semantic-ui-react';\nimport { googleApi } from \"../config\"\nimport * as _ from 'lodash'\nimport PlacesApi from '../services/places';\nimport { notify } from '../services/notifications';\nimport { PropTypes } from 'prop-types';\n\nexport default class Cards extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.placesApi = new PlacesApi()\n        this.state = {\n            items: 3,\n            savedPlaces: [],\n            placesList: this.props.placesList,\n            pages: [],\n            activePage: 1,\n            itemsPerPage: 6\n        }\n    }\n\n    placesListCount\n    colors = [\"yellow\", \"orange\", \"blue\", \"green\", \"red\"]\n    pages = []\n    setCardNums = () => {\n        if (window.innerWidth < 650)\n            this.setState({\n                items: 1\n            })\n        else if (window.innerWidth < 1200) {\n            this.setState({\n                items: 2\n            })\n        }\n        else\n            this.setState({ items: 3 })\n    }\n\n    savePlace = (pid, e) => {\n        const savedPlaces = this.state.savedPlaces\n        this.placesApi.savePlace({ user_id: localStorage.getItem(\"user_id\"), place_id: pid })\n            .then(() => notify(\"success\", \"Place saved.\"))\n        savedPlaces.push(pid)\n        this.setState({\n            savedPlaces: savedPlaces\n        })\n        e.target.disabled = true\n\n    }\n\n    removePlace = (pid, e) => {\n        this.placesApi.removePlace(localStorage.getItem(\"user_id\"), pid)\n            .then(() => notify(\"success\", \"Place removed.\"))\n        this.props.updatePlaces(pid)\n        if (this.state.activePage > Math.ceil(this.placesListCount / parseInt(this.state.itemsPerPage)))\n            this.setState({ activePage: Math.ceil(this.placesListCount / parseInt(this.state.itemsPerPage)) })\n    }\n\n    paginate = (list, activePage, offset) => {\n        offset = parseInt(offset)\n        activePage = parseInt(activePage)\n        const start = activePage * offset - offset\n        const end = start + offset > list.length ? list.length : start + offset\n        const newList = list.slice(start, end)\n        return newList\n    }\n\n    componentWillMount = () => {\n        this.setCardNums()\n        window.addEventListener(\"resize\", (ev) => {\n            this.setCardNums()\n        })\n        this.placesApi.getPlacesForUser(localStorage.getItem(\"user_id\"))\n            .then(res => {\n                res.data.data.forEach(d => {\n                    this.state.savedPlaces.push(d.place_id)\n                })\n            })\n        if (this.props.type === \"save\")\n            this.setState({ placesList: this.state.savedPlaces })\n    }\n    handlePageChange = (p, e) => {\n        this.setState({\n            activePage: e.activePage\n        })\n    }\n    handleItemsPerPageChange = (e) => {\n        this.setState({\n            itemsPerPage: e.target.value\n        })\n        if (this.state.activePage > Math.ceil(this.placesListCount / parseInt(e.target.value)))\n            this.setState({ activePage: Math.ceil(this.placesListCount / parseInt(e.target.value)) })\n    }\n\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", (ev) => {\n            this.setCardNums()\n        })\n    }\n\n    render() {\n        if (!this.props.placesList || this.props.placesList.length === 0)\n            return (\n\n                <div style={{ textAlign: \"center\" }}>No places found.</div>)\n        else {\n            this.pages = this.paginate(this.props.placesList, this.state.activePage, this.state.itemsPerPage)\n            this.placesListCount = this.props.placesList.length\n            this.totalPages = Math.ceil(this.placesListCount / this.state.itemsPerPage)\n            return (\n                <div>\n                    <Grid stackable columns={2}>\n                        <GridColumn>\n                            <div style={{ marginBottom: \"14px\" }}>\n                                <Pagination\n                                    activePage={this.state.activePage}\n                                    totalPages={this.totalPages}\n                                    onPageChange={this.handlePageChange.bind(this)\n                                    }\n                                />\n                            </div>\n\n                            <Label color=\"teal\" size=\"large\">{`Total items: ${this.placesListCount}`}</Label>\n                        </GridColumn>\n                        <GridColumn textAlign=\"right\">\n\n                            <Input\n                                name=\"rows\"\n                                type=\"number\"\n                                label={{ content: \"Max Displayed Items\", color: \"teal\" }}\n                                value={this.state.itemsPerPage}\n                                min=\"1\"\n                                max={this.placesListCount}\n                                onChange={this.handleItemsPerPageChange}\n                            >\n                            </Input>\n\n                        </GridColumn>\n                    </Grid>\n\n                    <CardList {...this.props}\n                        pages={this.pages}\n                        savedPlaces={this.state.savedPlaces}\n                        savePlace={this.savePlace}\n                        removePlace={this.removePlace}\n                        items={this.state.items}\n                    ></CardList>\n                </div >\n            )\n        }\n    }\n}\n\n\nconst CurrentStatus = (props) => {\n    if (props.hasOwnProperty(\"opened\") && props.opened === \"OPENED\")\n        return (<p style={{ color: \"green\" }}>OPENED</p>)\n    else if (props.hasOwnProperty(\"opened\") && props.opened === \"CLOSED\")\n        return (<p style={{ color: \"red\" }}>CLOSED</p>)\n    else return (<p>?</p>)\n}\n\nconst SaveOrRemoveBut = (props) => {\n    if (props.type !== \"save\") {\n        return (<Button compact icon={{ name: \"save\" }} disabled={props.disabled} color={props.saveButtonColor} onClick={props.savePlace}></Button>)\n    }\n    else {\n        return (<Button compact icon={{ name: \"circle remove\" }} color=\"red\" onClick={props.removePlace}></Button>)\n    }\n}\n\nconst CardList = (props) => {\n    const colors = [\"yellow\", \"orange\", \"blue\", \"green\", \"red\"]\n    return (\n\n        < Card.Group itemsPerRow={props.items} >\n            {\n                props.pages.map(p => {\n\n                    const lat = p.geometry.location.lat\n                    const lng = p.geometry.location.lng\n                    const color = _.sample(colors)\n                    const imageSize = 100\n                    let openedNow = \"?\"\n                    let src = \"\"\n                    let saveButtonColor = \"orange\"\n                    let disabled = false\n                    if (props.savedPlaces.includes(p.place_id)) {\n                        disabled = true\n                    }\n                    if (p.photos) {\n                        const photoreference = p.photos[0].photo_reference\n                        if (photoreference)\n                            src = `${googleApi.photosUrl}maxwidth=200&photoreference=${photoreference}&key=${googleApi.apiKey}`\n                        else\n                            src = p.photos[0].getUrl()\n                    }\n                    if (p.opening_hours && p.opening_hours.open_now)\n                        openedNow = \"OPENED\"\n                    if (p.opening_hours && !p.opening_hours.open_now)\n                        openedNow = \"CLOSED\"\n                    return (\n                        <Card color={color} key={p.id}>\n                            <Card.Content>\n                                <Card.Header >\n                                    <Grid columns={2}>\n                                        <Grid.Column width={12}>\n                                            {p.name}\n\n                                        </Grid.Column>\n                                        <Grid.Column textAlign=\"right\" width={4}>\n                                            <Image size=\"mini\" src={p.icon}></Image>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Card.Header>\n                            </Card.Content>\n                            <Card.Content>\n                                <Grid columns={2} height=\"100%\">\n                                    <Grid.Column verticalAlign=\"middle\">\n\n                                        <Card.Meta >\n                                            <Icon name=\"star\"></Icon>\n                                            {p.rating}\n                                        </Card.Meta>\n\n                                        <Segment vertical basic compact style={{ paddingBottom: 0 }}>\n                                            <Card.Description>\n                                                {p.vicinity}\n                                                <CurrentStatus opened={openedNow}></CurrentStatus>\n                                            </Card.Description>\n                                        </Segment>\n                                        <Segment basic vertical style={{ paddingBottom: 0 }}>\n                                            <Icon onClick={props.showMap.bind(this, lat, lng, p)} className=\"map-icon\" title=\"Map\" name=\"map\" color=\"blue\"></Icon>\n                                        </Segment>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <span style={{ borderRadius: \"5px\", height: imageSize + \"px\", float: \"right\", overflow: \"hidden\" }} >\n                                            <Image src={src} size=\"small\" rounded></Image>\n                                        </span>\n                                    </Grid.Column>\n                                </Grid>\n                                <Segment basic vertical textAlign=\"right\" style={{ marginBottom: 0 }}>\n                                    <SaveOrRemoveBut placeId={p.place_id} removePlace={props.removePlace.bind(this, p.place_id)} savePlace={props.savePlace.bind(this, p.place_id)} type={props.type} saveButtonColor={saveButtonColor} disabled={disabled}></SaveOrRemoveBut>\n                                </Segment>\n                            </Card.Content>\n                        </Card>)\n                }\n                )\n            }\n        </Card.Group >)\n}\n\nCardList.propTypes = {\n    placesList: PropTypes.arrayOf(PropTypes.object).isRequired,\n    items: PropTypes.number.isRequired,\n    savedPlaces: PropTypes.arrayOf(PropTypes.string).isRequired,\n    savePlace: PropTypes.func.isRequired,\n    removePlace: PropTypes.func.isRequired\n}","import React, { Component } from 'react';\nimport GoogleMapComponent from './GoogleMapComponent';\nimport Cards from './Cards';\n\nexport default class PlacesList extends Component {\n\n    colors = [\"blue\", \"purple\", \"orange\", \"red\", \"yellow\"]\n    items = 3\n    state = {\n        items: 3,\n        lat: this.props.currentPosition.lat,\n        lng: this.props.currentPosition.lng,\n        mapVisible: false,\n        close: false\n    }\n    showMap = (lat, lng, place) => {\n        if (typeof lat == \"function\") {\n            lat = lat()\n            lng = lng()\n        }\n        if (this.state.mapVisible) {\n            this.setState({\n                mapVisible: false\n            })\n        } else {\n            this.setState({\n                lat: lat,\n                lng: lng,\n                mapVisible: true,\n                place: place,\n                close: false\n            })\n        }\n    }\n\n    closeMap = (e, map) => {\n        this.setState({\n            mapVisible: false,\n            close: true\n        })\n    }\n\n    setNewLoc = (loc) => {\n        this.props.setNewLoc({ lat: loc.lat, lng: loc.lng })\n    }\n\n    render() {\n        if (this.props.currentPosition.lat)\n            return (\n                <div>\n                    <div hidden={!this.state.mapVisible} className=\"map-container \">\n\n                        <GoogleMapComponent\n                            {...this.props}\n                            type={this.props.type}\n                            visible={this.state.mapVisible}\n                            center={{ lat: this.state.lat, lng: this.state.lng, place: this.state.place }}\n                            places={this.props.placesList}\n                            currentPosition={this.props.currentPosition}\n                            resetMap={this.resetMap}\n                            loading={true}\n                            closeMap={this.closeMap}\n                            getPlaces={this.props.getPlaces}\n                            query={this.props.query}\n                            close={this.state.close}\n                            setNewLoc={this.props.setNewLoc}\n                        >\n\n                        </GoogleMapComponent>\n                    </div>\n                    <Cards\n                        type={this.props.type}\n                        placesList={this.props.placesList}\n                        userPlaces={this.state.userPlaces}\n                        showMap={this.showMap}\n                        updatePlaces={this.props.updatePlaces}\n                    ></Cards>\n\n                </div >\n            )\n        else\n            return (<div></div>)\n    }\n}\n\n","import React, { Component } from 'react';\nimport { Segment, Input, Icon, Form, Grid, GridColumn, Button, Header } from 'semantic-ui-react';\nimport PlacesList from '../components/PlacesList';\nimport PlacesApi from \"../services/places\"\nimport { notify } from '../services/notifications'\n\nclass CurrentLocation extends Component {\n\n    state = {\n        loading: true,\n        position: \"\",\n        mapVisible: false,\n        lat: null,\n        lng: null\n    }\n    constructor() {\n        super()\n        this.gma = new PlacesApi()\n    }\n\n    getFormData = (data) => {\n        this.setState(data)\n    }\n\n    getPosition = (reset) => {\n        this.setState({ loading: true })\n        this.gma.getCurrentPosition(reset).then(data => {\n            this.setState({\n                loading: false,\n                position: data.location,\n                lat: data.lat,\n                lng: data.lng\n            })\n        }).catch(err => {\n            notify(\"error\", err.message)\n            this.setState({ loading: false })\n        })\n    }\n    getPlacesFromMap = (places) => {\n        this.setState({\n            filteredPlaces: places,\n            placesList: places\n        })\n    }\n\n    getPlaces = (data) => {\n        this.setState({ loadingPlaces: true })\n        this.gma.getPlaces(data.radius, data.keyword, { lat: this.state.lat, lng: this.state.lng })\n            .then((data) => {\n                let placesList = data.data.data\n                placesList.forEach(p => {\n                    this.gma.getDetails(p.place_id, \"opening_hours,url\")\n                        .then(d => {\n                            p[\"opening_hours\"] = d.data && d.data.data ? d.data.data.opening_hours : null\n                            p[\"url\"] = d.data && d.data.data ? d.data.data.url : null\n                        }).catch(err => {\n                            notify(\"error\", err.message)\n                            this.setState({ loadingPlaces: false })\n                        })\n                })\n                this.setState({\n                    loadingPlaces: false,\n                    placesList: placesList,\n                    filteredPlaces: placesList\n                })\n            }).catch(err => {\n                notify(\"error\", err.message)\n                this.setState({ loadingPlaces: false })\n            })\n        this.setState({\n            query: data\n        })\n    }\n\n    handleSearch = (value) => {\n        let filteredPlaces = this.state.placesList ? this.state.placesList.filter((pl) => pl.name.toLowerCase().match(value.toLowerCase())) : null\n        this.setState({\n            filteredPlaces: filteredPlaces\n        })\n    }\n\n    componentWillMount() {\n        this.getPosition(false)\n    }\n    render() {\n        return (\n            <Segment.Group>\n                <Segment textAlign=\"center\" loading={this.state.loading}>\n                    <CurrentPositionView\n                        location={this.state.position}\n                        resetPosition={this.getPosition}>\n                    </CurrentPositionView>\n                </Segment>\n                <Segment>\n                    <SearchCurrentForm getPlaces={this.getPlaces} onSearch={this.handleSearch}></SearchCurrentForm>\n                </Segment>\n                <Segment loading={this.state.loadingPlaces}>\n                    <PlacesList\n                        {...this.props}\n                        query={this.state.query}\n                        placesList={this.state.filteredPlaces}\n                        getPlaces={this.getPlacesFromMap}\n                        currentPosition={{ lat: this.state.lat, lng: this.state.lng }}\n                    ></PlacesList>\n\n                </Segment>\n            </Segment.Group >\n        );\n    }\n}\n\nexport default CurrentLocation;\n\nclass CurrentPositionView extends Component {\n    reset = (e) => {\n        e.preventDefault()\n        this.props.resetPosition(true)\n    }\n    render() {\n        return (\n            <div >\n                <Header style={{ opacity: 1 }} size=\"medium\" icon>\n                    <Icon name=\"building\" size=\"small\"></Icon>\n                    {this.props.location}\n                </Header>\n            </div>\n        )\n    }\n}\n\nclass SearchCurrentForm extends Component {\n\n    state = {\n        keyword: \"karaoke\",\n        radius: \"300\"\n    }\n\n    handleSearch = (e) => {\n        this.props.onSearch(e.target.value)\n    }\n    handlePlaceChange = (e) => {\n        this.setState({\n            keyword: e.target.value\n        })\n    }\n    handleRadiusChange = (e) => {\n        this.setState({\n            radius: e.target.value\n        })\n    }\n    handleSubmit = () => {\n        this.props.getPlaces(this.state)\n    }\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit.bind(this)} >\n                <Form.Group widths=\"2\">\n                    <Form.Field>\n                        <Input\n                            onChange={this.handlePlaceChange.bind(this)}\n                            icon='building'\n                            iconPosition='left'\n                            placeholder='Search places'\n                            value={this.state.keyword} />\n                    </Form.Field>\n                    <Form.Field>\n                        <Input\n                            onChange={this.handleRadiusChange.bind(this)}\n                            type=\"number\"\n                            min=\"50\"\n                            step=\"50\"\n                            label=\"m\"\n                            labelPosition=\"right\"\n                            icon='location arrow'\n                            iconPosition='left'\n                            value={this.state.radius}\n                            placeholder='Set radius (m)' />\n                    </Form.Field>\n                </Form.Group>\n                <Grid columns={2}>\n                    <GridColumn>\n                        <Button icon color=\"orange\" labelPosition='left' disabled={!this.state.keyword}>\n                            <Icon name='location arrow' />\n                            Go\n                </Button>\n                    </GridColumn>\n                    <GridColumn textAlign=\"right\">\n                        <div className='ui transparent icon input' >\n                            <Input\n                                icon='search'\n                                iconPosition='left'\n                                placeholder='Search...'\n                                className='prompt'\n                                floated=\"right\"\n                                onChange={this.handleSearch.bind(this)}\n                            />\n                        </div>\n                    </GridColumn>\n                </Grid>\n            </Form>\n        )\n    }\n\n}\n\n","import axios from 'axios'\n\n\nexport default class LoginService {\n\n    tokenPrefix = \"Bearer\"\n    token\n    username\n\n    constructor() {\n        this.url = \"http://localhost:5000/api/\"\n    }\n\n    createUser(userCredentials) {\n        return axios.post(this.url + \"users\", { userCredentials })\n            .then(data => data)\n            .catch(err => Promise.reject(err))\n    }\n\n    signIn(userCredentials) {\n        return axios.post(this.url + \"auth/signin\", { userCredentials })\n            .then(data => {\n                localStorage.setItem(\"user_id\", data.data.user._id)\n                localStorage.setItem(\"user_name\", data.data.user.name)\n                this.username = data.data.user.name\n                this.token = data.data.token\n                return data\n            })\n            .catch(err => Promise.reject(err))\n    }\n}","import React, { Component } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Menu, Dropdown, Icon } from \"semantic-ui-react\"\nimport { Link } from 'react-router-dom'\nimport LoginService from '../services/login';\n\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props)\n\n    this.loginService = new LoginService()\n    this.state = {\n      username: localStorage.getItem(\"user_name\")\n    }\n  }\n  render() {\n    return (\n      <Menu attached=\"top\">\n        <Dropdown text=\"Menu\" item>\n          <Dropdown.Menu>\n            <Dropdown.Item as={Link} to=\"/locations/current\">\n              Current Location\n              </Dropdown.Item>\n            <Dropdown.Item as={Link} to=\"/locations/other\">\n              Other Locations\n              </Dropdown.Item>\n            <Dropdown.Item as={Link} to=\"/locations/saved\">Saved Places</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        <Menu.Item position=\"right\">\n          <Dropdown text={this.state.username ? <div><Icon name=\"user\"></Icon>{` ${this.state.username}`}</div> : null}>\n            <Dropdown.Menu className=\"rightDropdown\">\n              <Dropdown.Item >\n                View Profile\n            </Dropdown.Item>\n              <Dropdown.Item\n\n                as={Link} to=\"/login\"\n              >\n                Logout\n          </Dropdown.Item>\n            </Dropdown.Menu>\n\n          </Dropdown>\n        </Menu.Item>\n\n      </Menu >\n\n    );\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport Navigation from '../components/Navigation';\nimport NavigationRoutes from '../routes'\nimport { NotificationContainer } from 'react-notifications'\n\nclass App extends Component {\n    render() {\n        return (\n            <Container>\n                <Navigation></Navigation>\n                <NavigationRoutes></NavigationRoutes>\n                <NotificationContainer />\n            </Container>\n        );\n    }\n}\n\nexport default App\n","import React, { Component } from 'react';\nimport { Segment, Form, Input, Button, Grid, GridColumn, Icon, Header } from 'semantic-ui-react'\nimport PlacesList from '../components/PlacesList'\nimport PlacesApi from '../services/places'\n\nimport { notify } from '../services/notifications'\nclass OtherLocations extends Component {\n    constructor() {\n        super()\n        this.gma = new PlacesApi()\n    }\n\n    getPosition = (reset) => {\n        this.setState({ loading: true })\n        this.gma.getCurrentPosition(reset).then(data => {\n            this.setState({\n                loading: false,\n                location: data.location,\n                lat: data.lat,\n                lng: data.lng\n            })\n        }).catch(err => {\n            notify(\"error\", err.message)\n            this.setState({ loadingPlaces: false })\n        })\n    }\n    setNewLoc = (loc, newPlace) => {\n        this.setState({ lat: loc.lat, lng: loc.lng })\n        this.setState({ location: newPlace })\n\n    }\n    state = {\n        loading: false,\n        loadingPlaces: false,\n        location: \"!\"\n    }\n\n    getPlaces = (data) => {\n        this.setState({ loadingPlaces: true })\n        this.gma.getPlaces(data.radius, data.keyword, { lat: this.state.lat, lng: this.state.lng })\n            .then((data) => {\n                let placesList = data.data.data\n                placesList.forEach(p => {\n                    this.gma.getDetails(p.place_id, \"opening_hours,url\")\n                        .then(d => {\n                            p[\"opening_hours\"] = d.data && d.data.data ? d.data.data.opening_hours : null\n                            p[\"url\"] = d.data && d.data.data ? d.data.data.url : null\n                        }).catch(err => {\n                            notify(\"error\", err.message)\n                            this.setState({ loadingPlaces: false })\n                        })\n                })\n                this.setState({\n                    loadingPlaces: false,\n                    placesList: placesList,\n                    filteredPlaces: placesList\n                })\n            }).catch(err => {\n                notify(\"error\", err.message)\n                this.setState({ loadingPlaces: false })\n            })\n        this.setState({\n            query: data\n        })\n    }\n\n    handleSearch = (value) => {\n        const filteredPlaces = this.state.placesList ? this.state.placesList.filter((pl) => pl.name.toLowerCase().match(value.toLowerCase())) : null\n        this.setState({\n            filteredPlaces: filteredPlaces\n        })\n    }\n    getPlacesFromMap = (places) => {\n        this.setState({\n            filteredPlaces: places,\n            placesList: places\n        })\n    }\n    componentWillMount() {\n        this.getPosition(false)\n    }\n\n    onKeyword = (keyword) => {\n        this.setState({ query: { keyword: keyword } })\n    }\n\n    render() {\n        return (\n            <Segment.Group >\n                <Segment textAlign=\"center\" loading={this.state.loading}>\n                    <OtherLocationsView\n                        location={this.state.location}\n                    >\n                    </OtherLocationsView>\n                </Segment>\n                <Segment>\n                    <SearchOtherForm onKeyword={this.onKeyword} findPlaces={this.getPlaces} onSearch={this.handleSearch}></SearchOtherForm>\n                </Segment>\n                <Segment loading={this.state.loadingPlaces}>\n                    <PlacesList\n                        {...this.props}\n                        setNewLoc={this.setNewLoc}\n                        query={this.state.query}\n                        placesList={this.state.filteredPlaces}\n                        getPlaces={this.getPlacesFromMap}\n                        currentPosition={{ lat: this.state.lat, lng: this.state.lng }}\n                    ></PlacesList>\n                </Segment>\n            </Segment.Group >\n        );\n    }\n}\n\nexport default OtherLocations;\nclass SearchOtherForm extends Component {\n\n    state = {\n        city: \"\",\n        keyword: \"karaoke\"\n    }\n\n    handleSearch = (e) => {\n        this.props.onSearch(e.target.value)\n    }\n    handlePlaceChange = (e) => {\n        this.setState({ keyword: e.target.value })\n    }\n\n    handleCityChange = (e) => {\n        this.setState({\n            city: e.target.value\n        })\n    }\n\n    handleSubmit = () => {\n        this.props.findPlaces(this.state)\n    }\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit.bind(this)} >\n                <Form.Group widths=\"2\">\n                    <Form.Field>\n                        <Input\n                            onChange={this.handlePlaceChange.bind(this)}\n                            icon='building'\n                            iconPosition='left'\n                            placeholder='Search city places'\n                            value={this.state.keyword} />\n                    </Form.Field>\n\n                    <Form.Field>\n                        <Input\n                            id=\"searchCityField\"\n                            type=\"text\"\n                            ref={ref => (this.autocomplete = ref)}\n                            placeholder='Search cities'\n                        />\n\n                    </Form.Field>\n                    <div id=\"infowindow-content\"></div>\n                </Form.Group>\n                <Grid columns={2}>\n                    <GridColumn>\n                        <Button icon color=\"orange\" labelPosition='left' disabled={!this.state.keyword}>\n                            <Icon name='location arrow' />\n                            Go\n                </Button>\n                    </GridColumn>\n                    <GridColumn textAlign=\"right\">\n                        <div className='ui transparent icon input' >\n                            <Input\n                                icon='search'\n                                iconPosition='left'\n                                placeholder='Search...'\n                                className='prompt'\n                                floated=\"right\"\n                                onChange={this.handleSearch.bind(this)}\n                            />\n                        </div>\n                    </GridColumn>\n                </Grid>\n            </Form>\n        )\n    }\n\n}\nclass OtherLocationsView extends Component {\n\n    render() {\n        return (\n            <div>\n                <Header size=\"medium\" icon>\n                    <Icon name=\"building\" size=\"small\"></Icon>\n                    {this.props.location}\n                </Header>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Container, Button, Header, Form, Segment, Divider, Input, Grid, GridColumn } from 'semantic-ui-react';\nimport LoginService from '../services/login'\nimport { notify } from '../services/notifications';\nimport { NotificationContainer } from 'react-notifications'\n\n\nclass LoginPage extends Component {\n\n    constructor() {\n        super()\n        this.loginService = new LoginService()\n    }\n\n    state = {\n        buttonColorCreateNew: \"yellow\",\n        buttonColorSignIn: \"orange\",\n        type: \"signIn\"\n    }\n    login = (username, password) => {\n        const userCredentials = {\n            username: username,\n            password: password\n        }\n        if (this.state.type === \"signIn\") {\n            this.loginService.signIn(userCredentials)\n                .then(\n                    data => {\n                        this.props.history.push(\"/\")\n                        notify(\"success\", `Welcome ${data.data.user.name}!`)\n                    },\n                ).catch(err => {\n                    console.log(err)\n                    notify(\"error\", (err.response && err.response.data.error) || err.message)\n                })\n        }\n        else if (this.state.type === \"createNew\") {\n            this.loginService.createUser(userCredentials)\n                .then(\n                    data => {\n                        this.setState({\n                            type: \"signIn\"\n                        })\n\n                        notify(\"success\", data.data.message)\n                    },\n                ).catch(err => {\n\n                    notify(\"error\", (err.response && err.response.data.error) || err.message)\n                })\n        }\n    };\n\n    selectSignIn = (type) => {\n        this.setState({\n            buttonColorSignIn: \"orange\",\n            buttonColorCreateNew: \"yellow\",\n            type: \"signIn\"\n        })\n    }\n\n    selectLogIn = (type) => {\n        this.setState({\n            buttonColorSignIn: \"yellow\",\n            buttonColorCreateNew: \"orange\",\n            type: \"createNew\"\n        })\n    }\n    componentWillMount = () => {\n        localStorage.clear()\n    }\n\n    render() {\n        return (\n            <Container text style={{ marginTop: \"50px\" }}>\n                <Segment size=\"tiny\" >\n                    <Grid columns={3}>\n                        <GridColumn>\n\n                        </GridColumn>\n                        <GridColumn>\n                            <Header textAlign=\"center\" size=\"large\" >\n                                {this.state.type === \"signIn\" ? \"Sign In\" : \"Register\"}\n\n                            </Header>\n                        </GridColumn>\n                        <GridColumn textAlign=\"right\">\n                            <Button color={this.state.buttonColorSignIn} onClick={this.selectSignIn}>\n                                Sign In\n                            </Button >\n                            <Button color={this.state.buttonColorCreateNew} onClick={this.selectLogIn}>\n                                Register\n                            </Button>\n                        </GridColumn>\n                    </Grid>\n                    <Divider></Divider>\n                    <LoginForm login={this.login}></LoginForm>\n                </Segment>\n                <NotificationContainer></NotificationContainer>\n            </Container>\n        );\n    }\n}\n\nexport default LoginPage;\nclass LoginForm extends Component {\n\n    state = {\n        username: \"\",\n        password: \"\",\n        passInputType: \"password\"\n    }\n\n\n    handleUserChange = (e) => {\n        this.setState({\n            username: e.target.value\n        })\n    }\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value\n        })\n    }\n    handleSubmit = () => {\n        this.props.login(this.state.username, this.state.password)\n    }\n\n    changePassType = () => {\n        if (this.state.passInputType === \"password\")\n            this.setState({ passInputType: \"text\" })\n        else\n            this.setState({ passInputType: \"password\" })\n    }\n    render() {\n        return (\n\n            <Form onSubmit={this.handleSubmit.bind(this)} >\n\n                <Form.Field>\n                    <label basic=\"true\" >Username</label>\n                    <Input\n                        onChange={this.handleUserChange.bind(this)}\n                        icon='user circle'\n                        placeholder='Choose username'\n                        value={this.state.username} />\n                </Form.Field>\n                <Form.Field>\n                    <label basic=\"true\">Password</label>\n                    <Input\n                        onChange={this.handlePasswordChange.bind(this)}\n                        type={this.state.passInputType}\n                        value={this.state.password}\n                        placeholder='Choose password' >\n                        <input />\n                        <Button basic type=\"button\" onClick={this.changePassType} icon=\"eye\"></Button>\n\n                    </Input>\n                </Form.Field>\n\n                <Segment textAlign=\"center\" basic>\n                    <Button color=\"teal\" disabled={!this.state.username || !this.state.password}>\n\n                        LOGIN\n                </Button>\n\n                </Segment>\n            </Form>\n\n        )\n    }\n\n}\n","import React, { Component } from 'react';\nimport { Segment, Input, Select, Header, Icon } from 'semantic-ui-react';\nimport PlacesList from '../components/PlacesList';\nimport PlacesApi from \"../services/places\"\nimport { notify } from '../services/notifications'\nimport _ from \"lodash\"\n\nexport class SavedPlaces extends Component {\n\n    state = {\n        loadingPlaces: true,\n        filteredPlaces: [],\n        placesList: [],\n        citiesList: []\n    }\n    constructor() {\n        super()\n        this.gma = new PlacesApi()\n    }\n    getPosition = (reset) => {\n        this.setState({ loading: true })\n        this.gma.getCurrentPosition(reset).then(data => {\n            this.setState({\n                loading: false,\n                position: data.location,\n                lat: data.lat,\n                lng: data.lng\n            })\n        }).catch(err => {\n            notify(\"error\", err.message)\n            this.setState({ loading: false })\n        })\n    }\n    handleSearch = (value) => {\n        let filteredPlaces = this.state.filteredCities ? this.state.filteredCities.filter((pl) => pl.name.toLowerCase().match(value.toLowerCase())) : null\n        this.setState({\n            filteredPlaces: filteredPlaces\n        })\n    }\n\n    filterCities = ($e, $e2) => {\n        if ($e2.value === \"all\") {\n            this.setState({\n                filteredPlaces: this.state.placesList,\n                filteredCities: this.state.placesList,\n            })\n            return\n        }\n        let filteredCities = this.state.placesList ? this.state.placesList.filter((pl) => pl.city.match($e2.value)) : null\n        this.setState({\n            filteredPlaces: filteredCities,\n            filteredCities: filteredCities\n        })\n    }\n    updatePlaces = (pid) => {\n        let filteredPlaces = this.state.filteredPlaces.filter(fp => fp.place_id !== pid)\n        this.setState({\n            filteredPlaces: filteredPlaces\n        })\n    }\n    componentWillMount = () => {\n        this.getPosition()\n        this.gma.getPlacesForUser(localStorage.getItem(\"user_id\"))\n            .then(data => {\n                let placesList = []\n                let citiesList = [{ \"key\": \"all\", \"text\": \"All\", \"flag\": \"eu\", \"value\": \"all\" }]\n                if (data.data.data.length === 0) {\n                    this.setState({\n                        placesList: placesList,\n                        filteredPlaces: placesList,\n                        loadingPlaces: false,\n\n                    })\n                    return\n                }\n                data.data.data.forEach((d, i) => {\n                    let requestDetails = {\n                        placeId: d.place_id,\n                        fields: []\n                    }\n                    this.gma.getDetails(requestDetails.placeId, requestDetails.fields).then((det) => {\n\n                        const city = det.data.data.address_components.find(ac => ac.types.includes(\"locality\")).long_name\n                        const country = det.data.data.address_components.find(ac => ac.types.includes(\"country\")).long_name.toLowerCase()\n                        citiesList.push({ \"key\": i, \"text\": city, \"flag\": country, \"value\": city })\n                        placesList.push(Object.assign(det.data.data, { city: city }))\n                        if (placesList.length === data.data.data.length) {\n                            this.setState({\n                                placesList: placesList,\n                                filteredPlaces: placesList,\n                                filteredCities: placesList,\n                                loadingPlaces: false,\n                                citiesList: _.uniqBy(citiesList, \"text\")\n                            })\n                        }\n                    })\n                })\n\n            })\n\n    }\n\n    render() {\n        return (\n            <Segment.Group >\n                <Segment textAlign=\"center\" >\n                    <Header size=\"medium\" icon>\n                        <Icon name=\"save\" size=\"small\"></Icon>\n                        Saved Places\n                </Header>\n                </Segment>\n                {this.state.citiesList.length > 0 ? <Segment >\n                    <SearchBar filterCities={this.filterCities} citiesList={this.state.citiesList} onSearch={this.handleSearch} />\n                </Segment> : null}\n                <Segment loading={this.state.loadingPlaces}>\n                    <PlacesList\n                        {...this.props}\n                        updatePlaces={this.updatePlaces}\n                        type={\"save\"}\n                        setNewLoc={this.setNewLoc}\n                        query={this.state.query}\n                        placesList={this.state.filteredPlaces}\n                        getPlaces={this.getPlacesFromMap}\n                        currentPosition={{ lat: this.state.lat, lng: this.state.lng }}\n                    ></PlacesList>\n                </Segment>\n            </Segment.Group >\n        );\n    }\n}\n\nconst SearchBar = (props) => {\n    const handleSearch = (e) => {\n        props.onSearch(e.target.value)\n    }\n\n    return (\n        <Segment basic vertical textAlign=\"right\">\n            <Select onChange={props.filterCities} style={{ marginRight: \"14px\" }} placeholder=\"Select City\" options={props.citiesList}></Select>\n            <Input\n                icon='search'\n                iconPosition='left'\n                placeholder='Search...'\n                className='prompt'\n                floated=\"right\"\n                onChange={handleSearch}\n            />\n        </Segment>\n    )\n}\n\n\nexport default SavedPlaces","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport CurrentLocation from './containers/CurrentLocation'\nimport App from './containers/App';\nimport OtherLocations from './containers/OtherLocations';\nimport LoginPage from './containers/LoginPage'\nimport { SavedPlaces } from './containers/savedPlaces';\nimport { googleApi } from './config'\nimport { GoogleApiWrapper } from 'google-maps-react';\n\nexport const MainRoutes = (props) => (\n    <Switch>\n        <Route exact path=\"/\" render={() => <Redirect to=\"/locations/current\"></Redirect>}></Route>\n        <Route path='/locations' component={authGuard} />\n        <Route path='/login' component={LoginPage} />\n    </Switch>\n)\n\nexport const NavigationRoutes = (props) => (\n    <Switch>\n        <Route path='/locations/current' render={() => <CurrentLocation {...props} />} />\n        <Route path='/locations/other' render={() => <OtherLocations {...props} />} />\n        <Route path='/locations/saved' render={() => <SavedPlaces {...props} />} />\n    </Switch>\n)\n\nconst authGuard = (props) => {\n    if (localStorage.getItem(\"user_name\"))\n        return <App></App>\n    else {\n        return <Redirect to=\"/login\" ></Redirect>\n    }\n}\nexport default GoogleApiWrapper({\n    apiKey: (googleApi.apiKey)\n})(NavigationRoutes)\n\n","import React, { Component } from 'react'\n\nexport default class ErrorHandler extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { error: null, errorInfo: null }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({\n            error: error,\n            errorInfo: errorInfo\n        })\n    }\n\n    render() {\n        if (this.state.errorInfo) {\n            return (\n                <div>\n                    <h2>Something went wrong.</h2>\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\n                        {this.state.error && this.state.error.toString()}\n                        <br />\n                        {this.state.errorInfo.componentStack}\n                    </details>\n                </div>\n            );\n        }\n        return this.props.children;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport \"semantic-ui-css/semantic.min.css\"\nimport 'react-notifications/lib/notifications.css';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { MainRoutes } from './routes';\nimport ErrorHandler from './components/ErrorHandler';\n\nReactDOM.render(\n    <ErrorHandler>\n        <BrowserRouter>\n            <MainRoutes />\n        </BrowserRouter>\n    </ErrorHandler>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}